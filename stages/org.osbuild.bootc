#!/usr/bin/python3
"""
Deploy a bootc-enabled container

Run a bootc-enabled container image to install it to a filesystem tree.
"""
import json
import os
import subprocess
import sys

import osbuild.api
from osbuild.util import containers
from osbuild.util.mnt import MountGuard

# CAPABILITIES = ["CAP_MAC_ADMIN", "CAP_NET_ADMIN", "CAP_SYS_PTRACE", "CAP_BPF", "CAP_SYS_ADMIN"]
CAPABILITIES = ["ALL"]

SCHEMA_2 = """
"options": {
},
"inputs": {
  "type": "object",
  "additionalProperties": false,
  "required": ["images"],
  "properties": {
    "images": {
      "type": "object",
      "description": "Container Image to deploy",
      "additionalProperties": true
    }
  }
},
"devices": {
  "type": "object",
  "additionalProperties": true
},
"mounts": {
  "type": "array"
}
"""


def main(tree, inputs, options):
    mounts = options.get("mounts", [])
    # kopts = options.get("kernel_opts", [])

    # schema should catch the case in which there are more
    # than one input but this adds a second layer of security
    if len(inputs) > 1:
        raise ValueError("Only one input accepted")

    with MountGuard() as mounter:
        for mount in mounts:
            path = mount.lstrip("/")
            path = os.path.join(tree, path)
            mounter.mount(path, path)

        images = containers.parse_containers_input(inputs)
        for image in images.values():
            with containers.container_source(image) as (_, image_source):
                img_notrans = image_source.split(":")[1]
                args = ["podman", "run", "--env=RUST_LOG=trace", "--rm", "--privileged", "--pid=host", "-v",
                        "/:/target", "--network=none", "--security-opt", "label=type:unconfined_t", image_source,
                        "bootc", "install-to-filesystem", "--target-no-signature-verification",
                        "--karg=console=ttyS0,115200n8", "/target"]
                print(" ".join(args), file=sys.stderr)
                subprocess.run(args,
                               encoding="utf8",
                               stdout=sys.stderr,
                               check=True)


if __name__ == '__main__':
    stage_args = osbuild.api.arguments()
    r = main(stage_args["tree"],
             stage_args["inputs"],
             stage_args["options"])
    sys.exit(r)
